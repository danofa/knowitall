function BitViewer($scope){$scope.address,$scope.bin_addr,$scope.bin_mask,$scope.bv_broad,$scope.bv_networ,$scope.doaddr_change=function(){$scope.bin_mask=binaryFromAddress($scope.bv_netmask),$scope.bin_addr=binaryFromAddress($scope.bv_address),$scope.bv_network=addressFromBinary(getHighBits($scope.bin_addr,$scope.bin_mask)),$scope.bv_broad=addressFromBinary(getLowBits($scope.bin_addr,$scope.bin_mask))},$scope.getIpcount=getIpCount,$scope.chkOct=function(oct){return oct>255?255:0>oct?0:oct},$scope.doDot=function(val){return(val+1)%32==0?!1:(val+1)%8==0?!0:!1},$scope.toBits=function(nom){return"undefined"==typeof nom&&(nom=0),binaryFromAddress(nom)},$scope.docidr=function(cidr){var c=cidr;0>c&&(c=0),c>32&&(c=32),$scope.cidr=c,$scope.bv_netmask=getNetmask(c),$scope.doaddr_change()},$scope.donetmask=function(netmask){$scope.cidr=getCidr(netmask),$scope.doaddr_change()}}function ConverterController($scope){$scope.getCidr=getCidr,$scope.getNetmask=getNetmask,$scope.getIpcount=getIpCount}function TabController($scope){$scope.tab=1,$scope.changeTab=function(newIndex){$scope.tab=newIndex},$scope.isSet=function(tabIndex){return tabIndex===$scope.tab}}function SubnetController($scope){$scope.ipCounts=[],$scope.ipTable=[],$scope.ipNetwork="172.22.0.0",$scope.ipMask="255.255.0.0",$scope.addIPCount=function(){if($scope.count){var cidr=getCidrForIpCount($scope.count),mask=getNetmask(cidr);$scope.ipCounts.push({mask:mask,cidr:cidr,requested:$scope.count,actual:getIpCount(cidr)}),$scope.ipCounts.sort(function(a,b){return b.actual===a.actual?b.requested-a.requested:b.actual-a.actual}),$scope.count=""}},$scope.calcAd=function(){$scope.ipTable=[];var startAddress=$scope.ipNetwork;$scope.ipCounts.forEach(function(ip){var nextAddress=addIpCountToAddress(startAddress,ip.actual),a={res:startAddress,pip:addIpCountToAddress(startAddress,1),dip:addIpCountToAddress(startAddress,ip.actual-2),bcast:addIpCountToAddress(startAddress,ip.actual-1),mask:ip.mask};$scope.ipTable.push(a),startAddress=nextAddress})}}function getIpCount(cidr){return 0|Math.pow(2,32-cidr)}function getCidr(netmask){var binNetmask="";return netmask.split(".").forEach(function(octet){binNetmask+=Number(octet).toString(2)}),(binNetmask.match(/1/g)||[]).length}function getCidrForIpCount(numberOfIps){for(var hostBits=1;Math.pow(2,hostBits)-2<numberOfIps;)hostBits++;return 32-hostBits}function addIpCountToAddress(address,count){var bin="";return address.split(".").forEach(function(octet){bin+=pad8Bits(Number(octet).toString(2))}),addressFromBinary(Number(parseInt(bin,2)+count).toString(2))}function binaryFromAddress(addr){var bin="";return addr.length>=6&&addr.split(".").forEach(function(octet){bin+=pad8Bits(Number(octet).toString(2))}),bin}function addressFromBinary(bin){for(var b=pad32Bits(bin),result="",i=0;32>i;i+=8)i>0&&(result+="."),result+=parseInt(b.substr(i,8),2);return result}function pad32Bits(binNumber){var binString=binNumber+"";return binString=("00000000000000000000000000000000"+binString).substr(binString.length)}function pad8Bits(binNumber){var binString=binNumber+"";return binString=("00000000"+binString).substr(binString.length)}function getNetmask(cidr){if(cidr>32)return"error";for(var netMask="",i=0;4>i;i++){i>0&&(netMask+=".");for(var octet="",x=0;8>x;x++)octet+=cidr>8*i+x?"1":"0";netMask+=parseInt(octet,2)}return netMask}function getHighBits(val,mask){for(var result="",zero=!1,i=0;i<val.length;i++)"0"==mask.charAt(i)&&(zero=!0),result+=1==zero?"0":val.charAt(i)+"";return result}function getLowBits(val,mask){for(var result="",zero=!1,i=0;i<val.length;i++)"0"==mask.charAt(i)&&(zero=!0),result+=1==zero?"1":val.charAt(i)+"";return result}var app=angular.module("ipUtils",[]);app.controller("TabController",["$scope",TabController]),app.controller("SubnetController",["$scope",SubnetController]),app.controller("ConverterController",["$scope",ConverterController]),app.controller("BitViewer",["$scope",BitViewer]);